{"ast":null,"code":"var _jsxFileName = \"/home/t/DriveToby/xPro/blog/src/Home.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\nimport { useState, useEffect } from \"react\"; //importing the hook use state directly, no need for React..... in code\nimport BlogList from \"./BlogList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [blogs, setBlogs] = useState([{\n    title: \"My new website\",\n    body: \"lorem ipsum...\",\n    author: \"Paz\",\n    id: 1\n  }, {\n    title: \"Welcome party!\",\n    body: \"lorem ipsum...\",\n    author: \"Ida\",\n    id: 2\n  }, {\n    title: \"Web dev top tips\",\n    body: \"lorem ipsum...\",\n    author: \"Paz\",\n    id: 3\n  }]);\n  const [name, setName] = useState('Paz');\n\n  //handleDelete is fired up once clicked in the BlogList component but it just modifies the original \n  //blog list state, will be passed down to the component as a prop\n  const handleDelete = id => {\n    const newBlogs = blogs.filter(blog => blog.id !== id);\n    setBlogs(newBlogs);\n  };\n\n  //this function will always be fired off once the page is rendered, first load and every time as the data changes\n  useEffect(() => {\n    //changing the state inside side effect could be a bad idea because you could create an infinite loop\n    console.log('use effect ran');\n    console.log(blogs);\n\n    //dependency array: will only be run when certain conditions are met and not always at every re-render\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: blogs,\n      title: \"All Blogs!\",\n      handleDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setName('Ida'),\n      children: \"Change Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"7RBN666Oao9/Ju9oh+yOYN+Jtng=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","BlogList","Home","blogs","setBlogs","title","body","author","id","name","setName","handleDelete","newBlogs","filter","blog","console","log"],"sources":["/home/t/DriveToby/xPro/blog/src/Home.js"],"sourcesContent":["// import React from 'react';\nimport { useState, useEffect } from \"react\"; //importing the hook use state directly, no need for React..... in code\nimport BlogList from \"./BlogList\";\n\nconst Home = () => {\n  const [blogs, setBlogs] = useState([\n    { title: \"My new website\", body: \"lorem ipsum...\", author: \"Paz\", id: 1 },\n    { title: \"Welcome party!\", body: \"lorem ipsum...\", author: \"Ida\", id: 2 },\n    { title: \"Web dev top tips\", body: \"lorem ipsum...\", author: \"Paz\", id: 3 },\n  ]);\n  const [name, setName] = useState('Paz');\n\n\n  //handleDelete is fired up once clicked in the BlogList component but it just modifies the original \n  //blog list state, will be passed down to the component as a prop\n  const handleDelete = (id) => {\n    const newBlogs = blogs.filter(blog => blog.id !== id);\n    setBlogs(newBlogs);\n  }\n  \n  //this function will always be fired off once the page is rendered, first load and every time as the data changes\n  useEffect(() => {\n\n    //changing the state inside side effect could be a bad idea because you could create an infinite loop\n     console.log('use effect ran');\n     console.log(blogs);\n\n     //dependency array: will only be run when certain conditions are met and not always at every re-render\n  }, []); \n \n\n  return (\n    <div className=\"home\">\n        {/* handle delete will be evoked inside BlogList.js component but it is defined here above*/}\n        <BlogList blogs={blogs} title=\"All Blogs!\" handleDelete={handleDelete}/>\n        <button onClick={setName('Ida')}>Change Name</button>\n        <p>{name}</p>\n\n\n        {/* filter: return array for true items of call backfunction */}\n        {/* <BlogList blogs={blogs.filter((blog) => blog.author === 'Paz')} title=\"Paz' Blogs!\"/>  */}\n    </div>\n  )\n};\n\nexport default Home;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AAC7C,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAElC,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CACjC;IAAEM,KAAK,EAAE,gBAAgB;IAAEC,IAAI,EAAE,gBAAgB;IAAEC,MAAM,EAAE,KAAK;IAAEC,EAAE,EAAE;EAAE,CAAC,EACzE;IAAEH,KAAK,EAAE,gBAAgB;IAAEC,IAAI,EAAE,gBAAgB;IAAEC,MAAM,EAAE,KAAK;IAAEC,EAAE,EAAE;EAAE,CAAC,EACzE;IAAEH,KAAK,EAAE,kBAAkB;IAAEC,IAAI,EAAE,gBAAgB;IAAEC,MAAM,EAAE,KAAK;IAAEC,EAAE,EAAE;EAAE,CAAC,CAC5E,CAAC;EACF,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAGvC;EACA;EACA,MAAMY,YAAY,GAAIH,EAAE,IAAK;IAC3B,MAAMI,QAAQ,GAAGT,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKA,EAAE,CAAC;IACrDJ,QAAQ,CAACQ,QAAQ,CAAC;EACpB,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IAEd;IACCe,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7BD,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;;IAElB;EACH,CAAC,EAAE,EAAE,CAAC;EAGN,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,wBAEjB,QAAC,QAAQ;MAAC,KAAK,EAAEA,KAAM;MAAC,KAAK,EAAC,YAAY;MAAC,YAAY,EAAEQ;IAAa;MAAA;MAAA;MAAA;IAAA,QAAE,eACxE;MAAQ,OAAO,EAAED,OAAO,CAAC,KAAK,CAAE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAqB,eACrD;MAAA,UAAID;IAAI;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QAKX;AAEV,CAAC;AAAC,GAvCIP,IAAI;AAAA,KAAJA,IAAI;AAyCV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}