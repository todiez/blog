{"ast":null,"code":"var _jsxFileName = \"/home/t/DriveToby/xPro/blog/src/Home.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\nimport { useState, useEffect } from \"react\"; //importing the hook use state directly, no need for React..... in code\nimport BlogList from \"./BlogList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [blogs, setBlogs] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n\n  //this function will always be fired off once the page is rendered, first load and every time as the data changes\n  useEffect(() => {\n    //changing the state inside side effect could be a bad idea because you could create an infinite loop\n\n    setTimeout(() => {\n      fetch('http://localhost:8000/blogs') // start server command, cd into blog then npx json-server --watch data/database.json --port 8000\n      .then(res => {\n        //.then necessary because async is not possible inside useEffect, maybe with reference to external function\n        console.log(res);\n        if (res.ok) {}\n        return res.json();\n      }).then(data => {\n        console.log(data);\n        setBlogs(data);\n        setIsPending(false);\n      }).catch(err => {\n        console.log(err);\n        console.log(err.message);\n      });\n    }, 300);\n\n    //dependency array: will only be run when certain conditions are met and not always at every re-render\n  }, [isPending]); //watches after variable in [] brackets, once it changes it will run the function useEffect\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [isPending && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 23\n    }, this) /*output the div only when isPending is true*/, blogs && /*#__PURE__*/_jsxDEV(BlogList, {\n      blogs: blogs,\n      title: \"All Blogs!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"eW+tETtQoD/51nkvgVgZwjDDTdg=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","useEffect","BlogList","Home","blogs","setBlogs","isPending","setIsPending","setTimeout","fetch","then","res","console","log","ok","json","data","catch","err","message"],"sources":["/home/t/DriveToby/xPro/blog/src/Home.js"],"sourcesContent":["// import React from 'react';\nimport { useState, useEffect } from \"react\"; //importing the hook use state directly, no need for React..... in code\nimport BlogList from \"./BlogList\";\n\nconst Home = () => {\n  const [blogs, setBlogs] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n\n\n  //this function will always be fired off once the page is rendered, first load and every time as the data changes\n  useEffect(() => {\n    //changing the state inside side effect could be a bad idea because you could create an infinite loop\n    \n    setTimeout(() => {\n        fetch('http://localhost:8000/blogs') // start server command, cd into blog then npx json-server --watch data/database.json --port 8000\n        .then(res => {              //.then necessary because async is not possible inside useEffect, maybe with reference to external function\n          console.log(res);\n          if  (res.ok) {\n\n          }\n          return res.json();\n        })\n        .then((data) => {\n          console.log(data);\n          setBlogs(data);\n          setIsPending(false);\n        }).catch(err => {\n          console.log(err)\n          console.log(err.message)\n        }); \n    }, 300);\n     \n     //dependency array: will only be run when certain conditions are met and not always at every re-render\n  }, [isPending]); //watches after variable in [] brackets, once it changes it will run the function useEffect\n \n\n  return (\n    <div className=\"home\">\n        {isPending && <div>Loading</div> /*output the div only when isPending is true*/} \n        {blogs && <BlogList blogs={blogs} title=\"All Blogs!\" />}\n\n     \n\n        {/* filter: return array for true items of call backfunction */}\n        {/* <BlogList blogs={blogs.filter((blog) => blog.author === 'Paz')} title=\"Paz' Blogs!\"/>  */}\n    </div>\n  )\n};\n\nexport default Home;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AAC7C,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAElC,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;;EAGhD;EACAC,SAAS,CAAC,MAAM;IACd;;IAEAO,UAAU,CAAC,MAAM;MACbC,KAAK,CAAC,6BAA6B,CAAC,CAAC;MAAA,CACpCC,IAAI,CAACC,GAAG,IAAI;QAAe;QAC1BC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChB,IAAKA,GAAG,CAACG,EAAE,EAAE,CAEb;QACA,OAAOH,GAAG,CAACI,IAAI,EAAE;MACnB,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;QACdJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;QACjBX,QAAQ,CAACW,IAAI,CAAC;QACdT,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,CAACU,KAAK,CAACC,GAAG,IAAI;QACdN,OAAO,CAACC,GAAG,CAACK,GAAG,CAAC;QAChBN,OAAO,CAACC,GAAG,CAACK,GAAG,CAACC,OAAO,CAAC;MAC1B,CAAC,CAAC;IACN,CAAC,EAAE,GAAG,CAAC;;IAEN;EACH,CAAC,EAAE,CAACb,SAAS,CAAC,CAAC,CAAC,CAAC;;EAGjB,oBACE;IAAK,SAAS,EAAC,MAAM;IAAA,WAChBA,SAAS,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,CAAC,gDAChCF,KAAK,iBAAI,QAAC,QAAQ;MAAC,KAAK,EAAEA,KAAM;MAAC,KAAK,EAAC;IAAY;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAMrD;AAEV,CAAC;AAAC,GA3CID,IAAI;AAAA,KAAJA,IAAI;AA6CV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}